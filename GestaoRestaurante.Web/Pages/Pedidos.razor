@page "/pedidos"

@if (PedidosUsuario == null)
{
    <ExibirSpinner />
}
else
{
    <div class="row justify-content-center">
        <div class="col-md-6 text-center">
            <h3><strong>MEUS PEDIDOS</strong></h3>
        </div>
    </div>

    <div class="row justify-content-between">
        <div class="col-md-6">
            <h3 class="mb-5">Histórico</h3>
        </div>
        <div class="col-md-6">
            <div class="row align-items-end">
                <div class="col-md-2">
                    <label for="periodo">Período:</label>
                </div>
                <div class="col-md-4">
                    <div class="select-wrapper">
                        <select class="form-control" @bind="periodoSelecionado">
                            <option value="3">Últimos 3 meses</option>
                            <option value="6">Últimos 6 meses</option>
                            <option value="12">Últimos 12 meses</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-6">
                    <button class="btn btn-primary btn-block" @onclick="FiltrarPorPeriodo">Pesquisar</button>
                </div>
            </div>
        </div>
       
    </div>

    <hr class="mb-3" />
    @if (PedidosUsuario.Count() > 0)
    {
        var pedidos = from pedido in PedidosUsuario
                      group pedido by pedido.DataEmissao into pedidosUser
                      orderby pedidosUser.Key
                      select pedidosUser;

        @foreach (var pedidoGroup in pedidos)
        {
            var pedido = pedidoGroup.FirstOrDefault();

            <h4>@pedido.DataEmissao</h4>

            <div class="row mt-3">
                @foreach (var item in pedidoGroup)
                {
                    <div class="col-md-3 mb-2">
                        <div class="card">
                            <div class="card-body">
                                <p class="mb-4">Valor do Pedido: @item.ValorPedido.ToString("c")</p>
                                <p class="mb-4">Forma de Pagamento: @item.FormaPagamento</p>
                                <p class="mb-4">Status do Pedido: @item.StatusPedido</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <hr class="mb-2" />
        }
    }
}

@code {
    private DateTime dataInicial;
    private DateTime dataFinal;

    private int periodoSelecionado;

    public UsuarioLogado usuarioLogado { get; set; }

    public string? MensagemErro { get; set; }

    public IEnumerable<PedidoDto>? PedidosUsuario { get; set; }

    [Inject]
    public IPedidoService?
                PedidoService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DateTime dataFinal = DateTime.Today;
        dataInicial = dataFinal.AddMonths(-3);

        try
        {
            PedidosUsuario = await PedidoService.GetPedidosPorIntervaloDeData(dataInicial, dataFinal);
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }

        periodoSelecionado = 3;
    }

    private async Task FiltrarPorPeriodo()
    {
        await GetPedidosPorPeriodo(periodoSelecionado);
    }


    private async Task GetPedidosPorPeriodo(int periodoSelecionado)
    {
        DateTime dataFinal = DateTime.Today;
        DateTime dataInicial;

        switch (periodoSelecionado)
        {
            case 3:
                dataInicial = dataFinal.AddMonths(-3);
                break;
            case 6:
                dataInicial = dataFinal.AddMonths(-6);
                break;
            case 12:
                dataInicial = dataFinal.AddMonths(-12);
                break;
            default:
                dataInicial = dataFinal.AddMonths(-3);
                break;
        }

        PedidosUsuario = await PedidoService.GetPedidosPorIntervaloDeData(dataInicial, dataFinal);
    }
}

@page "/pedidos"

@if (PedidosUsuario == null)
{
    <ExibirSpinner />
}
else
{
    <div class="row justify-content-center">
        <div class="col-md-6 text-center">
            <h3><strong>MEUS PEDIDOS</strong></h3>
        </div>
    </div>
    <h3 class="mb-5">Histórico</h3>
    <hr class="mb-2" />
    @if (PedidosUsuario.Count() > 0)
    {
        var pedidos = from pedido in PedidosUsuario
                      group pedido by pedido.DataEmissao into pedidosUser
                      orderby pedidosUser.Key
                      select pedidosUser;

        @foreach (var pedidoGroup in pedidos)
        {
            var pedido = pedidoGroup.FirstOrDefault();

            <h4>@pedido.DataEmissao</h4>

            <div class="row mt-3">
                @foreach (var item in pedidoGroup)
                {
                    <div class="col-md-3 mb-2">
                        <div class="card">
                            <div class="card-body">
                                <p class="mb-4">Valor do Pedido: @item.ValorPedido.ToString("c")</p>
                                <p class="mb-4">Forma de Pagamento: @item.FormaPagamento</p>
                                <p class="mb-4">Status do Pedido: @item.StatusPedido</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <hr class="mb-2" />
        }
    }
}

@code {

    public UsuarioLogado usuarioLogado { get; set; }

    public string? MensagemErro { get; set; }

    public IEnumerable<PedidoDto>? PedidosUsuario { get; set; }

    [Inject]
    public IPedidoService?
                PedidoService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PedidosUsuario = await PedidoService.GetAllPedidos();
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }
}

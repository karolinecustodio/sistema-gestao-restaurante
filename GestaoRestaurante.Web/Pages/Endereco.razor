@page "/endereco"
@inject IJSRuntime Js;

<div class="container bg-light">
    <div class="row justify-content-center">
        <div class="card-header">Adicionar Endereço de Entrega</div>
        <div class="form-group">
            <label for="cep">CEP:</label><span class="text-danger">*</span>
            <input class="form-control" type="text" id="cep" @bind="endereco.Cep" required>
            <button class="btn btn-primary" @onclick="PesquisarCep">Pesquisar</button>
            <button class="btn btn-primary" @onclick="Limpar">Limpar</button>
        </div>
        <div class="form-group">
            <label for="rua">Rua:</label><span class="text-danger">*</span>
            <input @bind="endereco.Rua" type="text" class="form-control" id="rua" required>
        </div>

        <div class="form-group">
            <label for="numero">Número:</label><span class="text-danger">*</span>
            <input type="text" class="form-control" id="numero" @bind="endereco.Numero" required>
        </div>

        <div class="form-group">
            <label for="complemento">Complemento:</label>
            <input type="text" class="form-control" id="complemento" @bind="endereco.Complemento">
        </div>

        <div class="form-group">
            <label for="bairro">Bairro:</label><span class="text-danger">*</span>
            <select class="form-control" @bind="endereco.Bairro" required>
                <option value="">Selecione o bairro</option>
                @foreach (var bairro in bairros)
                {
                    <option value="@bairro.Id">@bairro.Nome</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="cidade">Cidade:</label><span class="text-danger">*</span>
            <input type="text" class="form-control" id="cidade" @bind="endereco.Cidade" required>
        </div>

        <div class="form-group">
            <label for="estado">Estado:</label><span class="text-danger">*</span>
            <input type="text" class="form-control" id="estado" @bind="endereco.Estado" required>
        </div>

        <button class="btn btn-primary" @onclick="SalvarEndereco">Salvar</button>

        @if (MensagemSucesso is not null)
        {
            <div class="alert alert-success" role="alert">
                @MensagemSucesso
            </div>
        }
    </div>
</div>

@code {

    public EnderecoDto endereco { get; set; }

    public string? MensagemSucesso { get; set; }

    private int? userId;

    private CepDto cepDto = new CepDto();

    private List<string> camposPreenchidos = new List<string>();

    private List<BairroDto> bairros = new List<BairroDto>();

    [Inject]
    public IGerenciaUsuarioEnderecoLocalStorageService GerenciaUsuarioEnderecoService { get; set; }

    [Inject]
    public IUsuarioEnderecoService UsuarioEnderecoService { get; set; }

    [Inject]
    public IEnderecoService EnderecoService { get; set; }

    [Inject]
    public ITaxaEntregaService TaxaEntregaService { get; set; }

    [Inject]
    public ICepService CepService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        endereco = new EnderecoDto();

        userId = await GerenciaUsuarioEnderecoService.GetUserId();

        if (userId.HasValue)
        {
            var usuarioEndereco = await UsuarioEnderecoService.GetUsuarioEnderecoByUsuarioId(userId);
            if (usuarioEndereco != null)
            {
                endereco.Cep = usuarioEndereco.Endereco.Cep;
                endereco.Rua = usuarioEndereco.Endereco.Rua;
                endereco.Numero = usuarioEndereco.Endereco.Numero;
                endereco.Bairro = usuarioEndereco.Endereco.Bairro;
                endereco.Cidade = usuarioEndereco.Endereco.Cidade;
                endereco.Estado = usuarioEndereco.Endereco.Estado;
                endereco.Complemento = usuarioEndereco.Endereco.Complemento;
            }
            else
            {
                endereco.Cep = string.Empty;
                endereco.Rua = string.Empty;
                endereco.Numero = string.Empty;
                endereco.Bairro = string.Empty;
                endereco.Cidade = string.Empty;
                endereco.Estado = string.Empty;
                endereco.Complemento = string.Empty;
            }

        }
        await LoadBairros();
    }

    private async Task LoadBairros()
    {
        try
        {
            var taxas = await TaxaEntregaService.GetAllTaxaDeEntrega();
            var bairrosUnicos = taxas.Select(taxa => taxa.NomeBairro).Distinct().ToList();
            bairros = bairrosUnicos.Select(bairro => new BairroDto { Id = bairro, Nome = bairro }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar bairros: {ex.Message}");
        }
    }

    private async Task SalvarEndereco()
    {
        if (userId.HasValue)
        {
            var enderecoSalvar = new EnderecoDto
                {
                    Cep = endereco.Cep,
                    Rua = endereco.Rua,
                    Numero = endereco.Numero,
                    Bairro = endereco.Bairro,
                    Cidade = endereco.Cidade,
                    Estado = endereco.Estado,
                    Complemento = endereco.Complemento
                };

            var enderecoDb = await EnderecoService.PostEndereco(enderecoSalvar);

            var usuarioEnd = new UsuarioEnderecoDto
                {
                    UsuarioId = userId.Value,
                    EnderecoId = enderecoDb.Id
                };

            await UsuarioEnderecoService.PostUsuarioEndereco(usuarioEnd);

            MensagemSucesso = "Endereço salvo!";
        }
    }

    private async Task PesquisarCep()
    {
        try
        {
            string cep = endereco.Cep.ToString();
            cepDto = await CepService.GetCep(cep);

            endereco.Cidade = cepDto.City;
            endereco.Rua = cepDto.Street;
            endereco.Estado = cepDto.State;

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao pesquisar CEP: {ex.Message}");
        }
    }

    private async Task Limpar()
    {
        endereco.Cep = string.Empty;
        endereco.Rua = string.Empty;
        endereco.Numero = string.Empty;
        endereco.Bairro = string.Empty;
        endereco.Cidade = string.Empty;
        endereco.Estado = string.Empty;
        endereco.Complemento = string.Empty;
    }
}

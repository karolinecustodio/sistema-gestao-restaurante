@page "/ProdutoDetalhes/{Id:int}"
@inject UsuarioLogado UsuarioLogado

@if (Produto is null && MensagemErro is null)
{
    <ExibirSpinner />
}
else if (MensagemErro is not null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
}
else
{
    <div class="container bg-light p-4">
        <div class="row justify-content-center align-items-center mb-4">
            <div class="col-md-6 text-center">
                <h3><strong>Detalhes do Produto</strong></h3>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 mb-4">
                <img class="img-fluid" src="@Produto.ImagemUrl">
            </div>
            <div class="col-md-6">
                <div class="d-flex flex-column align-items-start">
                    <h3>@Produto.Nome</h3>
                    <p class="mb-4">@Produto.Descricao</p>
                    <p class="mb-4">
                        <b>@Produto.ValorProd.ToString("C")&nbsp;</b>
                    </p>
                    <button class="btn btn-success" @onclick="() => AdicionarAoCarrinho_Click()">
                        Incluir no Carrinho
                    </button>
                </div>
            </div>
        </div>

        <div class="row justify-content-end mt-3">
            <div class="col-auto">
                <button class="btn btn-primary ml-2" @onclick="()=>BotaoVoltar_Click()" title="Voltar">
                    <i class="oi oi-chevron-left"></i>
                </button>
            </div>
        </div>
    </div>
}


@code {

    [Inject]
    public IProdutoService? ProdutoService { get; set; }

    [Inject]
    public ICarrinhoCompraService? CarrinhoCompraService { get; set; }

    [Inject]
    public ICarrinhoService? CarrinhoService { get; set; }

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public IGerenciaProdutosLocalStorageService?
               GerenciaProdutosLocalStorageService { get; set; }

    [Inject]
    public IGerenciaCarrinhoItensLocalStorageService?
                  GerenciaCarrinhoItensLocalStorageService { get; set; }

    [Inject]
    public IGerenciaUsuarioEnderecoLocalStorageService GerenciaUsuarioEnderecoService { get; set; }

    [Parameter]
    public int Id { get; set; }

    public ProdutoDto? Produto { get; set; }

    public string? MensagemErro { get; set; }

    private List<CarrinhoItemDto>? CarrinhoCompraItens { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CarrinhoCompraItens = await GerenciaCarrinhoItensLocalStorageService.GetCollection(UsuarioLogado);
            var userId = await GerenciaUsuarioEnderecoService.GetUserId();
            UsuarioLogado.UsuarioId = (int)userId;
            Produto = await GetProdutoPorId(Id);
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    protected async Task AdicionarAoCarrinho_Click()
    {
        var userId = await GerenciaUsuarioEnderecoService.GetUserId();

        try
        {
            // Log para verificar o userId
            Console.WriteLine($"UserId: {userId}");

            var carrinhoUsuario = await CarrinhoService.GetCarrinhoByUsuarioId(userId);

            // Log para verificar se o carrinho foi encontrado
            if (carrinhoUsuario == null)
            {
                Console.WriteLine("Carrinho não encontrado, criando novo carrinho...");
                var novoCarrinho = new CarrinhoDto
                    {
                        UsuarioId = (int)userId
                    };

                carrinhoUsuario = await CarrinhoService.PostCarrinho(novoCarrinho);
            }

            // Verificação adicional para garantir que carrinhoUsuario não é nulo011
            if (carrinhoUsuario != null)
            {
                Console.WriteLine($"Carrinho encontrado ou criado com sucesso: {carrinhoUsuario.Id}");
                var carrinhoItemAdicionaDto = new CarrinhoItemAdicionaDto
                    {
                        CarrinhoId = carrinhoUsuario.Id,
                        ProdutoId = Produto.Id,
                        Quantidade = 1
                    };

                var carrinhoItemDto = await CarrinhoCompraService.AdicionaItem(carrinhoItemAdicionaDto);

                if (carrinhoItemDto != null)
                {
                    CarrinhoCompraItens.Add(carrinhoItemDto);
                    await GerenciaCarrinhoItensLocalStorageService.SaveCollection(CarrinhoCompraItens);
                }

                NavigationManager.NavigateTo("/CarrinhoCompra");
            }
            else
            {
                // Log adicional para entender a falha
                Console.WriteLine("Erro: Não foi possível criar ou obter o carrinho do usuário.");
                throw new Exception("Erro ao criar ou obter o carrinho do usuário.");
            }
        }
        catch (Exception ex)
        {
            // Adicione logging para entender melhor o erro
            Console.WriteLine($"Erro ao adicionar item ao carrinho: {ex.Message}");
            throw;
        }
    }

    private async Task<ProdutoDto> GetProdutoPorId(int id)
    {
        var produtosDto = await GerenciaProdutosLocalStorageService.GetCollection();

        if (produtosDto != null)
        {
            return produtosDto.SingleOrDefault(p => p.Id == id);
        }
        return null;
    }

    protected void BotaoVoltar_Click()
    {
        NavigationManager.NavigateTo("/produtos");
    }
}
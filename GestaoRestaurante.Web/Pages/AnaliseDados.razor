@page "/analiseDados"

@if (analiseDados != null && produtos != null && produtos.Any())
{
    <div class="container bg-light p-4">
        <div class="row justify-content-center align-items-center mb-4">
            <div class="row justify-content-center">
                <div class="col-md-6 text-center">
                    <h3><strong>ANÁLISE DE DADOS</strong></h3>
                </div>
            </div>
            <div class="row justify-content-center mt-4">
                <div class="col-md-4">
                    <label for="dataInicial">Data Inicial:</label>
                    <input type="date" class="form-control" @bind="dataInicial" />
                </div>

                <div class="col-md-4">
                    <label for="dataFinal">Data Final:</label>
                    <input type="date" class="form-control" @bind="dataFinal" />
                </div>

                <div class="col-md-4 mt-4">
                    <button class="btn btn-primary btn-block" @onclick="BuscarInformacoes">Buscar</button>
                </div>
            </div>

            <div class="mb-4"></div>

            <hr class="mb-2" />

            <div class="row justify-content-center mt-5">
                <div>
                    <h4>Quantidade de Pedidos</h4>
                    <p>@analiseDados.QuantidadePedidos</p>
                    <hr />
                    <h4>Valor Total de Pedidos</h4>
                    <p>@analiseDados.ValorTotalPedidos.ToString("C")</p>
                    <hr />
                    <h4>Produtos Mais Vendidos</h4>
                    @{
                        var produtoMaisVendido = produtos.FirstOrDefault(p => p.Id == analiseDados.ProdutoMaisVendidoId);
                        if (produtoMaisVendido != null)
                        {
                            <p>Produto: @produtoMaisVendido.Nome</p>
                            <p>Quantidade Vendida: @analiseDados.QuantidadeProdutoMaisVendido</p>
                            <p>Total: @(produtoMaisVendido.ValorProd * analiseDados.QuantidadeProdutoMaisVendido)</p>
                        }
                    }
                    <hr />
                    <h4>Produtos Menos Vendidos</h4>
                    @{
                        var produtoMenosVendido = produtos.FirstOrDefault(p => p.Id == analiseDados.ProdutoMenosVendidoId);
                        if (produtoMenosVendido != null)
                        {
                            <p>Produto: @produtoMenosVendido.Nome</p>
                            <p>Quantidade Vendida: @analiseDados.QuantidadeProdutoMenosVendido</p>
                            <p>Total: @(produtoMenosVendido.ValorProd * analiseDados.QuantidadeProdutoMenosVendido)</p>
                        }
                    }
                    <hr />
                    <h4>Média de Gasto por Pedido</h4>
                    <p>@analiseDados.TicketMedio.ToString("C")</p>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <ExibirSpinner />
}

@code {

    private AnaliseDadosDto analiseDados;

    private IEnumerable<ProdutoDto> produtos = Enumerable.Empty<ProdutoDto>();

    public int TotalPedidos { get; set; } = 0;

    public string? MensagemErro { get; set; }

    private DateTime dataInicial;
    private DateTime dataFinal;

    decimal ticketMedio = 0;

    public IEnumerable<PedidoDto>? PedidosUsuario { get; set; }

    [Inject]
    public IPedidoItemService? PedidoItemService { get; set; }

    [Inject]
    public IProdutoService? ProdutoService { get; set; }

    [Inject]
    public IPedidoService PedidoService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DateTime dataAtual = DateTime.Now;

        dataInicial = dataAtual.AddDays(-30);
        dataFinal = DateTime.Now;

        produtos = await ProdutoService.GetItens();

        await BuscarInformacoes();
    }

    private async Task BuscarInformacoes()
    {
        var pedidos = await PedidoService.GetPedidosPorIntervaloDeData(dataInicial, dataFinal);
        PedidosUsuario = pedidos;

        var todosPedidoItens = new List<PedidoItemDto>();

        foreach (var pedido in pedidos)
        {
            var itensPedido = await PedidoItemService.GetItensPorPedidoId(pedido.Id);
            todosPedidoItens.AddRange(itensPedido);
        }

        var vendasPorProduto = todosPedidoItens.GroupBy(pi => pi.ProdutoId)
                                               .Select(g => new { ProdutoId = g.Key, Quantidade = g.Sum(x => x.Quantidade) })
                                               .ToList();

        if (vendasPorProduto.Any())
        {
            int produtoMaisVendidoId = vendasPorProduto.OrderByDescending(x => x.Quantidade).First().ProdutoId;
            int produtoMenosVendidoId = vendasPorProduto.OrderBy(x => x.Quantidade).First().ProdutoId;
            if (pedidos.Any())
            {
                decimal totalValorPedidos = pedidos.Sum(pedido => pedido.ValorPedido);
                int quantidadePedidos = pedidos.Count();

                ticketMedio = quantidadePedidos > 0 ? totalValorPedidos / quantidadePedidos : 0;
            }

            decimal? totalMaisVendido = produtos.FirstOrDefault(p => p.Id == produtoMaisVendidoId)?.ValorProd * vendasPorProduto.First(p => p.ProdutoId == produtoMaisVendidoId).Quantidade;
            decimal? totalMenosVendido = produtos.FirstOrDefault(p => p.Id == produtoMenosVendidoId)?.ValorProd * vendasPorProduto.First(p => p.ProdutoId == produtoMenosVendidoId).Quantidade;

            analiseDados = new AnaliseDadosDto
                {
                    ProdutoMaisVendidoId = produtoMaisVendidoId,
                    ProdutoMenosVendidoId = produtoMenosVendidoId,
                    QuantidadeProdutoMaisVendido = vendasPorProduto.First(p => p.ProdutoId == produtoMaisVendidoId).Quantidade,
                    QuantidadeProdutoMenosVendido = vendasPorProduto.First(p => p.ProdutoId == produtoMenosVendidoId).Quantidade,
                    TicketMedio = ticketMedio,
                    QuantidadePedidos = pedidos.Count(),
                    ValorTotalPedidos = pedidos.Sum(pedido => pedido.ValorPedido),
                    TotalProdutoMaisVendido = totalMaisVendido ?? 0,
                    TotalProdutoMenosVendido = totalMenosVendido ?? 0
                };
        }
    }
}
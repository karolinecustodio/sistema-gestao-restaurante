@page "/finalizarPedido/{PrecoTotal}"

@if (pedido == null)
{
    <ExibirSpinner />
}
else
{
    <div class="container bg-light p-4">
        <div class="row justify-content-center align-items-center mb-4">
            <div class="col-md-6 text-center">
                <h3><strong>SACOLA</strong></h3>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="card p-3 mb-4" style="width: 18rem;">
                <div class="card-body">
                    <h5><strong>The Brothers Burguer</strong></h5>
                    @if (CarrinhoCompraItens != null && CarrinhoCompraItens.Any())
                    {
                        @if (CarrinhoCompraItens.Count() > 0)
                        {
                            @foreach (var item in CarrinhoCompraItens)
                            {
                                <div class="row justify-content-between">
                                    <div class="col-md-20 d-flex align-items-center" style="width:300px">
                                        <p class="text-dark mb-0" style="width: 80px; display: inline-block;">@item.Quantidade</p>
                                        <p class="text-dark mb-0" style="width: 100px; display: inline-block;">@item.ProdutoNome</p>
                                        <p class="ml-auto mb-0" style="width: 120px">@item.Preco.ToString("C")</p>
                                    </div>
                                </div>
                            }
                            <div class="text-center" mt-3">
                                <a href="/CarrinhoCompra">Adicionar mais itens</a>
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="card p-3 mb-4" style="width: 18rem;">
                <div class="card-body">
                    <h5><strong>Pagamento na entrega</strong></h5>
                    <p class="card-text">Selecione a forma de pagamento:</p>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="formaPagamento" id="pagamentoCartao" value="Cartao" @onchange="AtualizarFormaPagamento">
                        <label class="form-check-label" for="pagamentoCartao">
                            Cartão
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="formaPagamento" id="pagamentoDinheiro" value="Dinheiro" @onchange="AtualizarFormaPagamento">
                        <label class="form-check-label" for="pagamentoDinheiro">
                            Dinheiro
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="formaPagamento" id="pagamentoPix" value="Pix" @onchange="AtualizarFormaPagamento">
                        <label class="form-check-label" for="pagamentoPix">
                            PIX
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="card p-3 mb-4" style="width: 36rem;">
                <div class="card-body" style="text-align: center; display: flex; flex-direction: column; align-items: center;">
                    <h5><strong>Pedido será feito: </strong></h5>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="opcaoEntrega" id="entrega" value="Novo" @onchange="AtualizarEntrega">
                        <label class="form-check-label" for="entrega">
                            Entrega
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="opcaoEntrega" id="retirada" value="AguardandoRetirada" @onchange="AtualizarEntrega">
                        <label class="form-check-label" for="retirada">
                            Retirada
                        </label>
                    </div>
                </div>
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="card p-3 mb-4" style="width: 36rem;">
                <div class="card-body">
                    <h5><strong>Resumo de Valores</strong></h5>
                    <div class="row justify-content-between">
                        <div class="col">
                            <p>Subtotal:</p>
                        </div>
                        <div class="col text-right">
                            <p>@PrecoTotal</p>
                        </div>
                    </div>
                    <div class="row justify-content-between">
                        <div class="col">
                            <p>Taxa de Entrega:</p>
                        </div>
                        <div class="col text-right">
                            <p>@($"R$ {ValorEntrega}")</p>
                        </div>
                    </div>
                    <div class="row justify-content-between">
                        <div class="col">
                            <p>Total:</p>
                        </div>
                        <div class="col">
                            <p>@($"R$ {ValorPedido}")</p>
                        </div>
                    </div>
                    <div>
                        <button class="btn btn-success"
                                @onclick="() => FinalizarPedido_Click()">
                                Finalizar Pedido
                        </button>
                    </div>
                </div>

                @if (MensagemSucesso is not null)
                {
                    <div class="alert alert-success" role="alert">
                        @MensagemSucesso
                    </div>
                }

            </div>
        </div>
        <div class="row justify-content-end mt-3">
            <div class="col-auto">
                <button class="btn btn-primary ml-2" @onclick="()=>BotaoVoltar_Click()" title="Voltar">
                    <i class="oi oi-chevron-left"></i>
                </button>
            </div>
        </div>
    </div>
}
@code {

    public PedidoDto pedido { get; set; }

    public List<CarrinhoItemDto>? CarrinhoCompraItens { get; set; }

    public UsuarioLogado usuarioLogado { get; set; }

    public string? MensagemSucesso { get; set; }

    [Parameter]
    public string PrecoTotal { get; set; }

    public decimal ValorPedido { get; set; }

    public decimal ValorEntrega { get; set; }

    public string formaPagamento { get; set; } = "1";

    private int? userId;

    public FormaPagamentoDto formaPagamentoDto { get; set; }
    public StatusPedidoDto statusPedidoDto { get; set; }

    public EnderecoDto endereco { get; set; }
    public TaxaEntregaDto taxaEntrega { get; set; }
    public UsuarioEnderecoDto usuarioEndereco { get; set; }

    [Inject]
    public IGerenciaCarrinhoItensLocalStorageService?
                 GerenciaCarrinhoItensLocalStorageService { get; set; }

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public IPedidoService PedidoService { get; set; }

    [Inject]
    public IPedidoItemService PedidoItemService { get; set; }

    [Inject]
    public IUsuarioEnderecoService UsuarioEnderecoService { get; set; }

    [Inject]
    public ICarrinhoService CarrinhoService { get; set; }

    [Inject]
    public ICarrinhoCompraService CarrinhoCompraService { get; set; }

    [Inject]
    public IEnderecoService EnderecoService { get; set; }

    [Inject]
    public ITaxaEntregaService TaxaEntregaService { get; set; }

    [Inject]
    public IGerenciaUsuarioEnderecoLocalStorageService GerenciaUsuarioEnderecoService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        pedido = new PedidoDto();

        userId = await GerenciaUsuarioEnderecoService.GetUserId();

        var carrinho = await CarrinhoService.GetCarrinhoByUsuarioId(userId);

        if(carrinho != null)
        {
            CarrinhoCompraItens = await CarrinhoCompraService.GetItens((int)userId);
        }

        usuarioEndereco = await UsuarioEnderecoService.GetUsuarioEnderecoByUsuarioId(userId);

        if (usuarioEndereco != null)
        {
            endereco = await EnderecoService.GetByIdEndereco(usuarioEndereco.EnderecoId);

            taxaEntrega = await TaxaEntregaService.GetTaxaEntregaByNomeBairro(endereco.Bairro);

            ValorEntrega = taxaEntrega.ValorEntrega;
        }

        decimal precoTotalDecimal = decimal.Parse(PrecoTotal.TrimStart('R', '$', ' '));

        ValorPedido = precoTotalDecimal + ValorEntrega;
    }

    protected void BotaoVoltar_Click()
    {
        NavigationManager.NavigateTo("/CarrinhoCompra");
    }

    protected async Task FinalizarPedido_Click()
    {
        var statusPedido = StatusPedidoDto.Novo;

        int endereco;
        if (statusPedidoDto == StatusPedidoDto.Novo)
        {
            endereco = (int)usuarioEndereco.EnderecoId;
        }
        else
        {
            endereco = 0;
        }

        pedido = new PedidoDto
            {
                DataEmissao = DateTime.Now,
                ValorPedido = ValorPedido,
        
                EnderecoId = endereco,
                UsuarioId = (int)userId,
                TaxaId = taxaEntrega.Id,
                FormaPagamento = formaPagamentoDto,
                StatusPedido = statusPedido
            };


        var pedidoDb = await PedidoService.PostPedido(pedido);

        if (CarrinhoCompraItens != null && CarrinhoCompraItens.Any())
        {
            foreach (var item in CarrinhoCompraItens)
            {
                var pedidoItemDb = new PedidoItemDto
                    {
                        ProdutoId = item.ProdutoId,
                        PedidoId = pedidoDb.Id,
                        ValorProd = item.Preco,
                        Quantidade = item.Quantidade
                    };

                await PedidoItemService.PostPedidoItem(pedidoItemDb);
            }
        }

        MensagemSucesso = "Pedido realizado com sucesso!";

        NavigationManager.NavigateTo("/pedidos");
    }

    private void AtualizarFormaPagamento(ChangeEventArgs e)
    {
        formaPagamentoDto = Enum.Parse<FormaPagamentoDto>(e.Value.ToString());
    }

    private async Task AtualizarEntrega(ChangeEventArgs e)
    {
        statusPedidoDto = Enum.Parse<StatusPedidoDto>(e.Value.ToString());

        if (statusPedidoDto == StatusPedidoDto.Novo)
            taxaEntrega = await TaxaEntregaService.GetTaxaEntregaByNomeBairro(endereco.Bairro);
        else
        {
            taxaEntrega = new TaxaEntregaDto
                {
                    ValorEntrega = 0
                };
        }

        ValorEntrega = taxaEntrega.ValorEntrega;

        decimal precoTotalDecimal = decimal.Parse(PrecoTotal.TrimStart('R', '$', ' '));

        ValorPedido = precoTotalDecimal + ValorEntrega;
    }
}

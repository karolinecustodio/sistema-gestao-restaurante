@page "/CarrinhoCompra"
@inject IJSRuntime Js;

@if (CarrinhoCompraItens is null && MensagemErro is null)
{
    <ExibirSpinner />
}
else if (MensagemErro is not null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
}
else
{
      <div class="container bg-light p-4">
        <div class="row justify-content-center align-items-center mb-4">
            <div class="col-md-6 text-center">
                <h3><strong>CARRINHO</strong></h3>
            </div>
            @if (CarrinhoCompraItens.Count() > 0)
            {
                <div class="row mb-5">
                    <div class="col-md-9">
                        @foreach (var item in CarrinhoCompraItens)
                        {
                            <div class="row mb-3">
                                <div class="col-md-3">
                                    <img src="@item.ProdutoImagemURL" width="250" class="img-thumbnail">
                                </div>
                                <div class="col-md-9">
                                    <h5>@item.ProdutoNome</h5>
                                    <div class="mb-4">
                                        @item.ProdutoDescricao
                                    </div>
                                    <span>
                                        Preço: <b>@item.Preco.ToString("C")</b>
                                        <input @oninput="()=>AtualizaQuantidade_Input(item.Id)" type="number" @bind="@item.Quantidade" />
                                        <button data-itemId="@item.Id" class="btn btn-info btn-sm atualizaquantidade" @onclick="(()=> AtualizaQuantidadeCarrinhoItem_Click(item.Id, item.Quantidade))">
                                            <i class="oi oi-check"></i>
                                        </button>
                                        <br>
                                        <button @onclick="(()=> DeletaCarrinhoItem_Click(item.Id))" class="btn btn-danger sm">
                                            <span class="oi oi-trash"></span>
                                        </button>
                                    </span>
                                </div>
                            </div>
                        }
                </div>
                <div class="col-md-3">
                    <h5>Carrinho - Resumo</h5>
                    <div class="mt-2">
                        <div>Total - (@QuantidadeTotal items)&nbsp;<br /><b>@PrecoTotal</b></div>
                        <button type="submit" class="btn btn-primary" @onclick:preventDefault @onclick="Continuar_Click">
                            Continuar
                        </button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div>
                <h3><b>Seu carrinho está vazio</b></h3>
            </div>
        }
            <div class="row justify-content-end mt-3">
                <div class="col-auto">
                    <button class="btn btn-primary ml-2" @onclick="()=>BotaoVoltar_Click()" title="Voltar">
                        <i class="oi oi-chevron-left"></i>
                    </button>
                    <button class="btn btn-danger" @onclick="()=>BotaoLimpar_Click()" title="Limpar">
                        <i class="oi oi-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    public UsuarioLogado usuarioLogado { get; set; }

    [Inject]
    public ICarrinhoCompraService? CarrinhoCompraService { get; set; }

    public List<CarrinhoItemDto>? CarrinhoCompraItens { get; set; }

    public string? MensagemErro { get; set; }

    protected string? PrecoTotal { get; set; }
    protected int QuantidadeTotal { get; set; }

    [Inject]
    public IGerenciaCarrinhoItensLocalStorageService?
                 GerenciaCarrinhoItensLocalStorageService { get; set; }

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CarrinhoCompraItens = await GerenciaCarrinhoItensLocalStorageService.GetCollection(usuarioLogado);

            CarrinhoChanged();
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    protected async Task DeletaCarrinhoItem_Click(int id)
    {
        //exclui o item do banco de dados
        var carrinhoItemDto = await CarrinhoCompraService.DeletaItem(id);

        //remoção do item da coleção de objetos da memoria no cliente
        await RemoveCarrinhoItem(id);

        CarrinhoChanged();
    }

    protected async Task AtualizaQuantidadeCarrinhoItem_Click(int id, int quantidade)
    {
        try
        {
            if (quantidade > 0)
            {
                var atualizaItemDto = new CarrinhoItemAtualizaQuantidadeDto
                    {
                        CarrinhoItemId = id,
                        Quantidade = quantidade
                    };

                var retornaItemAtualizadoDto = await CarrinhoCompraService
                                                     .AtualizaQuantidade(atualizaItemDto);

                AtualizaPrecoTotalItem(retornaItemAtualizadoDto);
                CarrinhoChanged();
                await Js.InvokeVoidAsync("TornaBotaoAtualizarQuantidadeVisivel", id, false);
            }
            else
            {
                var item = CarrinhoCompraItens.FirstOrDefault(i => i.Id == id);
                if (item is not null)
                {
                    item.Quantidade = 1;
                    item.PrecoTotal = item.Preco;
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    protected void Continuar_Click()
    {
        NavigationManager.NavigateTo($"/finalizarPedido/{PrecoTotal}");
    }

    protected void BotaoLimpar_Click()
    {
        NavigationManager.NavigateTo($"/finalizarPedido/{PrecoTotal}");
    }

    protected void BotaoVoltar_Click()
    {
        NavigationManager.NavigateTo("/produtos");
    }

    private CarrinhoItemDto GetCarrinhoItem(int id)
    {
        return CarrinhoCompraItens.FirstOrDefault(i => i.Id == id);
    }

    private async Task RemoveCarrinhoItem(int id)
    {
        var carrinhoItemDto = GetCarrinhoItem(id);
        CarrinhoCompraItens.Remove(carrinhoItemDto);

        await GerenciaCarrinhoItensLocalStorageService.SaveCollection(CarrinhoCompraItens);
    }

    private void SetPrecoTotal()
    {
        PrecoTotal = CarrinhoCompraItens.Sum(p => p.PrecoTotal).ToString("C");
    }

    private void SetQuantidadeTotal()
    {
        QuantidadeTotal = CarrinhoCompraItens.Sum(p => p.Quantidade);
    }

    private void CalculaResumoCarrinhoTotal()
    {
        SetPrecoTotal();
        SetQuantidadeTotal();
    }

    private async Task AtualizaPrecoTotalItem(CarrinhoItemDto carrinhoItemDto)
    {
        var item = GetCarrinhoItem(carrinhoItemDto.Id);

        if (item != null)
        {
            item.PrecoTotal = carrinhoItemDto.Preco * carrinhoItemDto.Quantidade;
        }

        await GerenciaCarrinhoItensLocalStorageService.SaveCollection(CarrinhoCompraItens);
    }

    protected async Task AtualizaQuantidade_Input(int id)
    {
        await Js.InvokeVoidAsync("TornaBotaoAtualizarQuantidadeVisivel", id, true);
    }

    private void CarrinhoChanged()
    {
        CalculaResumoCarrinhoTotal();
        CarrinhoCompraService.RaiseEventOnCarrinhoCompraChanged(QuantidadeTotal);
    }
}

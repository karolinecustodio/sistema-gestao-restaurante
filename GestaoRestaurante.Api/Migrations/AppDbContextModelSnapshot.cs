// <auto-generated />
using System;
using GestaoRestaurante.Api.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GestaoRestaurante.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Carrinho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Carrinho");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.CarrinhoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarrinhoId")
                        .HasColumnType("integer");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorProd")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CarrinhoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("CarrinhoItem");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IconCss")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Categoria");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconCss = "fas fa-spa",
                            Nome = "Lanches"
                        },
                        new
                        {
                            Id = 2,
                            IconCss = "fas fa-spa",
                            Nome = "Bebidas"
                        },
                        new
                        {
                            Id = 3,
                            IconCss = "fas fa-spa",
                            Nome = "Sobremesas"
                        });
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("integer");

                    b.Property<int>("FormaPagamento")
                        .HasColumnType("integer");

                    b.Property<int>("StatusPedido")
                        .HasColumnType("integer");

                    b.Property<int>("TaxaId")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorPedido")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pedido");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.PedidoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PedidoId")
                        .HasColumnType("integer");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorProd")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("PedidoItem");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ImagemUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorProd")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Produto");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaId = 1,
                            Descricao = "Um x-bacon delicioso que combina bacon crocante, queijo derretido, alface, tomate e maionese.",
                            ImagemUrl = "Imagens/Lanches/xbacon.png",
                            Nome = "X-bacon",
                            Quantidade = 150,
                            ValorProd = 15m
                        },
                        new
                        {
                            Id = 2,
                            CategoriaId = 2,
                            Descricao = "Refrigerante Guarana 2l.",
                            ImagemUrl = "Imagens/Bebidas/guarana.png",
                            Nome = "Guarana",
                            Quantidade = 150,
                            ValorProd = 10m
                        },
                        new
                        {
                            Id = 3,
                            CategoriaId = 1,
                            Descricao = "Um x-salada delicioso que combina hambúrguer, queijo derretido, alface, tomate, maionese e cebola roxa.",
                            ImagemUrl = "Imagens/Lanches/xsalada.png",
                            Nome = "X-Salada",
                            Quantidade = 150,
                            ValorProd = 15m
                        },
                        new
                        {
                            Id = 4,
                            CategoriaId = 1,
                            Descricao = "Um x-salada delicioso que combina hambúrguer, queijo derretido, alface, tomate, maionese cebola roxa. Acompanha fritas.",
                            ImagemUrl = "Imagens/Lanches/xsaladaFritas.png",
                            Nome = "X-Salada com Fritas",
                            Quantidade = 150,
                            ValorProd = 20m
                        },
                        new
                        {
                            Id = 5,
                            CategoriaId = 2,
                            Descricao = "Refrigerante Pepsi 2l",
                            ImagemUrl = "Imagens/Bebidas/pepsi.png",
                            Nome = "Pepsi",
                            Quantidade = 150,
                            ValorProd = 10m
                        },
                        new
                        {
                            Id = 6,
                            CategoriaId = 2,
                            Descricao = "Refrigerante Sukita Uva 2l",
                            ImagemUrl = "Imagens/Bebidas/sukitauva.png",
                            Nome = "Sukita Uva",
                            Quantidade = 150,
                            ValorProd = 10m
                        },
                        new
                        {
                            Id = 7,
                            CategoriaId = 2,
                            Descricao = "H2O",
                            ImagemUrl = "Imagens/Bebidas/h2o.png",
                            Nome = "H2O",
                            Quantidade = 150,
                            ValorProd = 10m
                        });
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.TaxaEntrega", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NomeBairro")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TempoEntrega")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorEntrega")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("TaxaEntrega");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NomeBairro = "Centro",
                            TempoEntrega = 35,
                            ValorEntrega = 10m
                        });
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NomeUsuario")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Senha")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("TipoUsuario")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "karolinecustodio7@gmail.com",
                            NomeUsuario = "admin",
                            Telefone = "47997418959"
                        });
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.UsuarioEndereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EnderecoId")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioEndereco");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Carrinho", b =>
                {
                    b.HasOne("GestaoRestaurante.Api.Entities.Usuario", null)
                        .WithMany("Carrinho")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.CarrinhoItem", b =>
                {
                    b.HasOne("GestaoRestaurante.Api.Entities.Carrinho", "Carrinho")
                        .WithMany("Itens")
                        .HasForeignKey("CarrinhoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestaoRestaurante.Api.Entities.Produto", "Produto")
                        .WithMany("Itens")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrinho");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Pedido", b =>
                {
                    b.HasOne("GestaoRestaurante.Api.Entities.Usuario", null)
                        .WithMany("Pedido")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.PedidoItem", b =>
                {
                    b.HasOne("GestaoRestaurante.Api.Entities.Pedido", "Pedido")
                        .WithMany("PedidoItens")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestaoRestaurante.Api.Entities.Produto", "Produto")
                        .WithMany("PedidoItens")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Produto", b =>
                {
                    b.HasOne("GestaoRestaurante.Api.Entities.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.UsuarioEndereco", b =>
                {
                    b.HasOne("GestaoRestaurante.Api.Entities.Endereco", "Endereco")
                        .WithMany("UsuarioEndereco")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestaoRestaurante.Api.Entities.Usuario", "Usuario")
                        .WithMany("Enderecos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Carrinho", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Endereco", b =>
                {
                    b.Navigation("UsuarioEndereco");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Pedido", b =>
                {
                    b.Navigation("PedidoItens");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Produto", b =>
                {
                    b.Navigation("Itens");

                    b.Navigation("PedidoItens");
                });

            modelBuilder.Entity("GestaoRestaurante.Api.Entities.Usuario", b =>
                {
                    b.Navigation("Carrinho");

                    b.Navigation("Enderecos");

                    b.Navigation("Pedido");
                });
#pragma warning restore 612, 618
        }
    }
}
